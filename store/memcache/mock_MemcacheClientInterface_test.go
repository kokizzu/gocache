// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package memcache

import (
	"github.com/bradfitz/gomemcache/memcache"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMemcacheClientInterface creates a new instance of MockMemcacheClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemcacheClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemcacheClientInterface {
	mock := &MockMemcacheClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMemcacheClientInterface is an autogenerated mock type for the MemcacheClientInterface type
type MockMemcacheClientInterface struct {
	mock.Mock
}

type MockMemcacheClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemcacheClientInterface) EXPECT() *MockMemcacheClientInterface_Expecter {
	return &MockMemcacheClientInterface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockMemcacheClientInterface
func (_mock *MockMemcacheClientInterface) Add(item *memcache.Item) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*memcache.Item) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMemcacheClientInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockMemcacheClientInterface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - item *memcache.Item
func (_e *MockMemcacheClientInterface_Expecter) Add(item interface{}) *MockMemcacheClientInterface_Add_Call {
	return &MockMemcacheClientInterface_Add_Call{Call: _e.mock.On("Add", item)}
}

func (_c *MockMemcacheClientInterface_Add_Call) Run(run func(item *memcache.Item)) *MockMemcacheClientInterface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *memcache.Item
		if args[0] != nil {
			arg0 = args[0].(*memcache.Item)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMemcacheClientInterface_Add_Call) Return(err error) *MockMemcacheClientInterface_Add_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMemcacheClientInterface_Add_Call) RunAndReturn(run func(item *memcache.Item) error) *MockMemcacheClientInterface_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CompareAndSwap provides a mock function for the type MockMemcacheClientInterface
func (_mock *MockMemcacheClientInterface) CompareAndSwap(item *memcache.Item) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for CompareAndSwap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*memcache.Item) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMemcacheClientInterface_CompareAndSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareAndSwap'
type MockMemcacheClientInterface_CompareAndSwap_Call struct {
	*mock.Call
}

// CompareAndSwap is a helper method to define mock.On call
//   - item *memcache.Item
func (_e *MockMemcacheClientInterface_Expecter) CompareAndSwap(item interface{}) *MockMemcacheClientInterface_CompareAndSwap_Call {
	return &MockMemcacheClientInterface_CompareAndSwap_Call{Call: _e.mock.On("CompareAndSwap", item)}
}

func (_c *MockMemcacheClientInterface_CompareAndSwap_Call) Run(run func(item *memcache.Item)) *MockMemcacheClientInterface_CompareAndSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *memcache.Item
		if args[0] != nil {
			arg0 = args[0].(*memcache.Item)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMemcacheClientInterface_CompareAndSwap_Call) Return(err error) *MockMemcacheClientInterface_CompareAndSwap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMemcacheClientInterface_CompareAndSwap_Call) RunAndReturn(run func(item *memcache.Item) error) *MockMemcacheClientInterface_CompareAndSwap_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockMemcacheClientInterface
func (_mock *MockMemcacheClientInterface) Delete(item string) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMemcacheClientInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMemcacheClientInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - item string
func (_e *MockMemcacheClientInterface_Expecter) Delete(item interface{}) *MockMemcacheClientInterface_Delete_Call {
	return &MockMemcacheClientInterface_Delete_Call{Call: _e.mock.On("Delete", item)}
}

func (_c *MockMemcacheClientInterface_Delete_Call) Run(run func(item string)) *MockMemcacheClientInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMemcacheClientInterface_Delete_Call) Return(err error) *MockMemcacheClientInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMemcacheClientInterface_Delete_Call) RunAndReturn(run func(item string) error) *MockMemcacheClientInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function for the type MockMemcacheClientInterface
func (_mock *MockMemcacheClientInterface) FlushAll() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMemcacheClientInterface_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockMemcacheClientInterface_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
func (_e *MockMemcacheClientInterface_Expecter) FlushAll() *MockMemcacheClientInterface_FlushAll_Call {
	return &MockMemcacheClientInterface_FlushAll_Call{Call: _e.mock.On("FlushAll")}
}

func (_c *MockMemcacheClientInterface_FlushAll_Call) Run(run func()) *MockMemcacheClientInterface_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMemcacheClientInterface_FlushAll_Call) Return(err error) *MockMemcacheClientInterface_FlushAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMemcacheClientInterface_FlushAll_Call) RunAndReturn(run func() error) *MockMemcacheClientInterface_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockMemcacheClientInterface
func (_mock *MockMemcacheClientInterface) Get(key string) (*memcache.Item, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *memcache.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*memcache.Item, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *memcache.Item); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memcache.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMemcacheClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMemcacheClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockMemcacheClientInterface_Expecter) Get(key interface{}) *MockMemcacheClientInterface_Get_Call {
	return &MockMemcacheClientInterface_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockMemcacheClientInterface_Get_Call) Run(run func(key string)) *MockMemcacheClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMemcacheClientInterface_Get_Call) Return(item *memcache.Item, err error) *MockMemcacheClientInterface_Get_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockMemcacheClientInterface_Get_Call) RunAndReturn(run func(key string) (*memcache.Item, error)) *MockMemcacheClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockMemcacheClientInterface
func (_mock *MockMemcacheClientInterface) Set(item *memcache.Item) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*memcache.Item) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMemcacheClientInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockMemcacheClientInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - item *memcache.Item
func (_e *MockMemcacheClientInterface_Expecter) Set(item interface{}) *MockMemcacheClientInterface_Set_Call {
	return &MockMemcacheClientInterface_Set_Call{Call: _e.mock.On("Set", item)}
}

func (_c *MockMemcacheClientInterface_Set_Call) Run(run func(item *memcache.Item)) *MockMemcacheClientInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *memcache.Item
		if args[0] != nil {
			arg0 = args[0].(*memcache.Item)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMemcacheClientInterface_Set_Call) Return(err error) *MockMemcacheClientInterface_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMemcacheClientInterface_Set_Call) RunAndReturn(run func(item *memcache.Item) error) *MockMemcacheClientInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}
